// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: events.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThorStreamer_StreamUpdates_FullMethodName = "/thor_streamer.types.ThorStreamer/StreamUpdates"
)

// ThorStreamerClient is the client API for ThorStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThorStreamerClient interface {
	StreamUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageWrapper], error)
}

type thorStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewThorStreamerClient(cc grpc.ClientConnInterface) ThorStreamerClient {
	return &thorStreamerClient{cc}
}

func (c *thorStreamerClient) StreamUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageWrapper], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ThorStreamer_ServiceDesc.Streams[0], ThorStreamer_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, MessageWrapper]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ThorStreamer_StreamUpdatesClient = grpc.ServerStreamingClient[MessageWrapper]

// ThorStreamerServer is the server API for ThorStreamer service.
// All implementations must embed UnimplementedThorStreamerServer
// for forward compatibility.
type ThorStreamerServer interface {
	StreamUpdates(*Empty, grpc.ServerStreamingServer[MessageWrapper]) error
	mustEmbedUnimplementedThorStreamerServer()
}

// UnimplementedThorStreamerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThorStreamerServer struct{}

func (UnimplementedThorStreamerServer) StreamUpdates(*Empty, grpc.ServerStreamingServer[MessageWrapper]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedThorStreamerServer) mustEmbedUnimplementedThorStreamerServer() {}
func (UnimplementedThorStreamerServer) testEmbeddedByValue()                      {}

// UnsafeThorStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThorStreamerServer will
// result in compilation errors.
type UnsafeThorStreamerServer interface {
	mustEmbedUnimplementedThorStreamerServer()
}

func RegisterThorStreamerServer(s grpc.ServiceRegistrar, srv ThorStreamerServer) {
	// If the following call pancis, it indicates UnimplementedThorStreamerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThorStreamer_ServiceDesc, srv)
}

func _ThorStreamer_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThorStreamerServer).StreamUpdates(m, &grpc.GenericServerStream[Empty, MessageWrapper]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ThorStreamer_StreamUpdatesServer = grpc.ServerStreamingServer[MessageWrapper]

// ThorStreamer_ServiceDesc is the grpc.ServiceDesc for ThorStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThorStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thor_streamer.types.ThorStreamer",
	HandlerType: (*ThorStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _ThorStreamer_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}
