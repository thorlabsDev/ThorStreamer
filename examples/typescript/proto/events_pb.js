// source: events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.thor_streamer.types.CompiledInstruction', null, global);
goog.exportSymbol('proto.thor_streamer.types.Empty', null, global);
goog.exportSymbol('proto.thor_streamer.types.InnerInstruction', null, global);
goog.exportSymbol('proto.thor_streamer.types.InnerInstructions', null, global);
goog.exportSymbol('proto.thor_streamer.types.LoadedAddresses', null, global);
goog.exportSymbol('proto.thor_streamer.types.Message', null, global);
goog.exportSymbol('proto.thor_streamer.types.MessageAddressTableLookup', null, global);
goog.exportSymbol('proto.thor_streamer.types.MessageHeader', null, global);
goog.exportSymbol('proto.thor_streamer.types.MessageWrapper', null, global);
goog.exportSymbol('proto.thor_streamer.types.MessageWrapper.EventMessageCase', null, global);
goog.exportSymbol('proto.thor_streamer.types.Reward', null, global);
goog.exportSymbol('proto.thor_streamer.types.SanitizedTransaction', null, global);
goog.exportSymbol('proto.thor_streamer.types.SlotStatus', null, global);
goog.exportSymbol('proto.thor_streamer.types.SlotStatusEvent', null, global);
goog.exportSymbol('proto.thor_streamer.types.StreamType', null, global);
goog.exportSymbol('proto.thor_streamer.types.SubscribeUpdateAccountInfo', null, global);
goog.exportSymbol('proto.thor_streamer.types.ThorAccountsRequest', null, global);
goog.exportSymbol('proto.thor_streamer.types.TransactionEvent', null, global);
goog.exportSymbol('proto.thor_streamer.types.TransactionEventWrapper', null, global);
goog.exportSymbol('proto.thor_streamer.types.TransactionStatusMeta', null, global);
goog.exportSymbol('proto.thor_streamer.types.TransactionTokenBalance', null, global);
goog.exportSymbol('proto.thor_streamer.types.UiTokenAmount', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.Empty.displayName = 'proto.thor_streamer.types.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.SlotStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.SlotStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.SlotStatus.displayName = 'proto.thor_streamer.types.SlotStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.SubscribeUpdateAccountInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.SubscribeUpdateAccountInfo.displayName = 'proto.thor_streamer.types.SubscribeUpdateAccountInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.ThorAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.ThorAccountsRequest.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.ThorAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.ThorAccountsRequest.displayName = 'proto.thor_streamer.types.ThorAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.SlotStatusEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.SlotStatusEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.SlotStatusEvent.displayName = 'proto.thor_streamer.types.SlotStatusEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.MessageHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.MessageHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.MessageHeader.displayName = 'proto.thor_streamer.types.MessageHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.CompiledInstruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.CompiledInstruction.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.CompiledInstruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.CompiledInstruction.displayName = 'proto.thor_streamer.types.CompiledInstruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.LoadedAddresses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.LoadedAddresses.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.LoadedAddresses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.LoadedAddresses.displayName = 'proto.thor_streamer.types.LoadedAddresses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.MessageAddressTableLookup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.MessageAddressTableLookup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.MessageAddressTableLookup.displayName = 'proto.thor_streamer.types.MessageAddressTableLookup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.Message.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.Message.displayName = 'proto.thor_streamer.types.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.SanitizedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.SanitizedTransaction.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.SanitizedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.SanitizedTransaction.displayName = 'proto.thor_streamer.types.SanitizedTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.TransactionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.TransactionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.TransactionEvent.displayName = 'proto.thor_streamer.types.TransactionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.InnerInstruction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.InnerInstruction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.InnerInstruction.displayName = 'proto.thor_streamer.types.InnerInstruction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.InnerInstructions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.InnerInstructions.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.InnerInstructions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.InnerInstructions.displayName = 'proto.thor_streamer.types.InnerInstructions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.UiTokenAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.UiTokenAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.UiTokenAmount.displayName = 'proto.thor_streamer.types.UiTokenAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.TransactionTokenBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.TransactionTokenBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.TransactionTokenBalance.displayName = 'proto.thor_streamer.types.TransactionTokenBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.Reward.displayName = 'proto.thor_streamer.types.Reward';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.TransactionStatusMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.thor_streamer.types.TransactionStatusMeta.repeatedFields_, null);
};
goog.inherits(proto.thor_streamer.types.TransactionStatusMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.TransactionStatusMeta.displayName = 'proto.thor_streamer.types.TransactionStatusMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.TransactionEventWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.thor_streamer.types.TransactionEventWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.TransactionEventWrapper.displayName = 'proto.thor_streamer.types.TransactionEventWrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.thor_streamer.types.MessageWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.thor_streamer.types.MessageWrapper.oneofGroups_);
};
goog.inherits(proto.thor_streamer.types.MessageWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.thor_streamer.types.MessageWrapper.displayName = 'proto.thor_streamer.types.MessageWrapper';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.Empty}
 */
proto.thor_streamer.types.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.Empty;
  return proto.thor_streamer.types.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.Empty}
 */
proto.thor_streamer.types.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.SlotStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.SlotStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.SlotStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SlotStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHash: msg.getBlockHash_asB64(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.SlotStatus}
 */
proto.thor_streamer.types.SlotStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.SlotStatus;
  return proto.thor_streamer.types.SlotStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.SlotStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.SlotStatus}
 */
proto.thor_streamer.types.SlotStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SlotStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.SlotStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.SlotStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SlotStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParent();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatus.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatus} returns this
 */
proto.thor_streamer.types.SlotStatus.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent = 2;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatus.prototype.getParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatus} returns this
 */
proto.thor_streamer.types.SlotStatus.prototype.setParent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatus} returns this
 */
proto.thor_streamer.types.SlotStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes block_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SlotStatus.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes block_hash = 4;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.thor_streamer.types.SlotStatus.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SlotStatus.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SlotStatus} returns this
 */
proto.thor_streamer.types.SlotStatus.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 block_height = 5;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatus.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatus} returns this
 */
proto.thor_streamer.types.SlotStatus.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.SubscribeUpdateAccountInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: msg.getPubkey_asB64(),
    lamports: jspb.Message.getFieldWithDefault(msg, 2, 0),
    owner: msg.getOwner_asB64(),
    executable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    rentEpoch: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    writeVersion: jspb.Message.getFieldWithDefault(msg, 7, 0),
    txnSignature: msg.getTxnSignature_asB64(),
    slot: (f = msg.getSlot()) && proto.thor_streamer.types.SlotStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.SubscribeUpdateAccountInfo;
  return proto.thor_streamer.types.SubscribeUpdateAccountInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLamports(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwner(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecutable(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRentEpoch(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWriteVersion(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnSignature(value);
      break;
    case 9:
      var value = new proto.thor_streamer.types.SlotStatus;
      reader.readMessage(value,proto.thor_streamer.types.SlotStatus.deserializeBinaryFromReader);
      msg.setSlot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.SubscribeUpdateAccountInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLamports();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOwner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getExecutable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRentEpoch();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getWriteVersion();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getSlot();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.thor_streamer.types.SlotStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes pubkey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubkey = 1;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 lamports = 2;
 * @return {number}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getLamports = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setLamports = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes owner = 3;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getOwner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes owner = 3;
 * This is a type-conversion wrapper around `getOwner()`
 * @return {string}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getOwner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwner()));
};


/**
 * optional bytes owner = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwner()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getOwner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setOwner = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool executable = 4;
 * @return {boolean}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getExecutable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setExecutable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint64 rent_epoch = 5;
 * @return {number}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getRentEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setRentEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 write_version = 7;
 * @return {number}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getWriteVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setWriteVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes txn_signature = 8;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getTxnSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes txn_signature = 8;
 * This is a type-conversion wrapper around `getTxnSignature()`
 * @return {string}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getTxnSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnSignature()));
};


/**
 * optional bytes txn_signature = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnSignature()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getTxnSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setTxnSignature = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.clearTxnSignature = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.hasTxnSignature = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SlotStatus slot = 9;
 * @return {?proto.thor_streamer.types.SlotStatus}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.getSlot = function() {
  return /** @type{?proto.thor_streamer.types.SlotStatus} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.SlotStatus, 9));
};


/**
 * @param {?proto.thor_streamer.types.SlotStatus|undefined} value
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
*/
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.setSlot = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.SubscribeUpdateAccountInfo} returns this
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.clearSlot = function() {
  return this.setSlot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.SubscribeUpdateAccountInfo.prototype.hasSlot = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.ThorAccountsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.ThorAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.ThorAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.ThorAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.ThorAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountAddressList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.ThorAccountsRequest}
 */
proto.thor_streamer.types.ThorAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.ThorAccountsRequest;
  return proto.thor_streamer.types.ThorAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.ThorAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.ThorAccountsRequest}
 */
proto.thor_streamer.types.ThorAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAccountAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.ThorAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.ThorAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.ThorAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.ThorAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountAddressList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string account_address = 1;
 * @return {!Array<string>}
 */
proto.thor_streamer.types.ThorAccountsRequest.prototype.getAccountAddressList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.thor_streamer.types.ThorAccountsRequest} returns this
 */
proto.thor_streamer.types.ThorAccountsRequest.prototype.setAccountAddressList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.ThorAccountsRequest} returns this
 */
proto.thor_streamer.types.ThorAccountsRequest.prototype.addAccountAddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.ThorAccountsRequest} returns this
 */
proto.thor_streamer.types.ThorAccountsRequest.prototype.clearAccountAddressList = function() {
  return this.setAccountAddressList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.SlotStatusEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.SlotStatusEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SlotStatusEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    parent: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHash: msg.getBlockHash_asB64(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.SlotStatusEvent}
 */
proto.thor_streamer.types.SlotStatusEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.SlotStatusEvent;
  return proto.thor_streamer.types.SlotStatusEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.SlotStatusEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.SlotStatusEvent}
 */
proto.thor_streamer.types.SlotStatusEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParent(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.SlotStatusEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.SlotStatusEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SlotStatusEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParent();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatusEvent} returns this
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 parent = 2;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getParent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatusEvent} returns this
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.setParent = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatusEvent} returns this
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes block_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes block_hash = 4;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SlotStatusEvent} returns this
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 block_height = 5;
 * @return {number}
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.SlotStatusEvent} returns this
 */
proto.thor_streamer.types.SlotStatusEvent.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.MessageHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.MessageHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.MessageHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.MessageHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    numRequiredSignatures: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numReadonlySignedAccounts: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numReadonlyUnsignedAccounts: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.MessageHeader}
 */
proto.thor_streamer.types.MessageHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.MessageHeader;
  return proto.thor_streamer.types.MessageHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.MessageHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.MessageHeader}
 */
proto.thor_streamer.types.MessageHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumRequiredSignatures(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumReadonlySignedAccounts(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumReadonlyUnsignedAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.MessageHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.MessageHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.MessageHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.MessageHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumRequiredSignatures();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNumReadonlySignedAccounts();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNumReadonlyUnsignedAccounts();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 num_required_signatures = 1;
 * @return {number}
 */
proto.thor_streamer.types.MessageHeader.prototype.getNumRequiredSignatures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.MessageHeader} returns this
 */
proto.thor_streamer.types.MessageHeader.prototype.setNumRequiredSignatures = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 num_readonly_signed_accounts = 2;
 * @return {number}
 */
proto.thor_streamer.types.MessageHeader.prototype.getNumReadonlySignedAccounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.MessageHeader} returns this
 */
proto.thor_streamer.types.MessageHeader.prototype.setNumReadonlySignedAccounts = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 num_readonly_unsigned_accounts = 3;
 * @return {number}
 */
proto.thor_streamer.types.MessageHeader.prototype.getNumReadonlyUnsignedAccounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.MessageHeader} returns this
 */
proto.thor_streamer.types.MessageHeader.prototype.setNumReadonlyUnsignedAccounts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.CompiledInstruction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.CompiledInstruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.CompiledInstruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.CompiledInstruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    programIdIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64(),
    accountsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.CompiledInstruction}
 */
proto.thor_streamer.types.CompiledInstruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.CompiledInstruction;
  return proto.thor_streamer.types.CompiledInstruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.CompiledInstruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.CompiledInstruction}
 */
proto.thor_streamer.types.CompiledInstruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProgramIdIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAccounts(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.CompiledInstruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.CompiledInstruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.CompiledInstruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgramIdIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 program_id_index = 1;
 * @return {number}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.getProgramIdIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.CompiledInstruction} returns this
 */
proto.thor_streamer.types.CompiledInstruction.prototype.setProgramIdIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.CompiledInstruction} returns this
 */
proto.thor_streamer.types.CompiledInstruction.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated uint32 accounts = 3;
 * @return {!Array<number>}
 */
proto.thor_streamer.types.CompiledInstruction.prototype.getAccountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.thor_streamer.types.CompiledInstruction} returns this
 */
proto.thor_streamer.types.CompiledInstruction.prototype.setAccountsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.CompiledInstruction} returns this
 */
proto.thor_streamer.types.CompiledInstruction.prototype.addAccounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.CompiledInstruction} returns this
 */
proto.thor_streamer.types.CompiledInstruction.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.LoadedAddresses.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.LoadedAddresses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.LoadedAddresses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.LoadedAddresses.toObject = function(includeInstance, msg) {
  var f, obj = {
    writableList: msg.getWritableList_asB64(),
    readonlyList: msg.getReadonlyList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.LoadedAddresses}
 */
proto.thor_streamer.types.LoadedAddresses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.LoadedAddresses;
  return proto.thor_streamer.types.LoadedAddresses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.LoadedAddresses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.LoadedAddresses}
 */
proto.thor_streamer.types.LoadedAddresses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addWritable(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addReadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.LoadedAddresses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.LoadedAddresses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.LoadedAddresses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWritableList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getReadonlyList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * repeated bytes writable = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.getWritableList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes writable = 1;
 * This is a type-conversion wrapper around `getWritableList()`
 * @return {!Array<string>}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.getWritableList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getWritableList()));
};


/**
 * repeated bytes writable = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWritableList()`
 * @return {!Array<!Uint8Array>}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.getWritableList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getWritableList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.thor_streamer.types.LoadedAddresses} returns this
 */
proto.thor_streamer.types.LoadedAddresses.prototype.setWritableList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.LoadedAddresses} returns this
 */
proto.thor_streamer.types.LoadedAddresses.prototype.addWritable = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.LoadedAddresses} returns this
 */
proto.thor_streamer.types.LoadedAddresses.prototype.clearWritableList = function() {
  return this.setWritableList([]);
};


/**
 * repeated bytes readonly = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.getReadonlyList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes readonly = 2;
 * This is a type-conversion wrapper around `getReadonlyList()`
 * @return {!Array<string>}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.getReadonlyList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getReadonlyList()));
};


/**
 * repeated bytes readonly = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReadonlyList()`
 * @return {!Array<!Uint8Array>}
 */
proto.thor_streamer.types.LoadedAddresses.prototype.getReadonlyList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getReadonlyList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.thor_streamer.types.LoadedAddresses} returns this
 */
proto.thor_streamer.types.LoadedAddresses.prototype.setReadonlyList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.LoadedAddresses} returns this
 */
proto.thor_streamer.types.LoadedAddresses.prototype.addReadonly = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.LoadedAddresses} returns this
 */
proto.thor_streamer.types.LoadedAddresses.prototype.clearReadonlyList = function() {
  return this.setReadonlyList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.MessageAddressTableLookup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.MessageAddressTableLookup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.MessageAddressTableLookup.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountKey: msg.getAccountKey_asB64(),
    writableIndexes: msg.getWritableIndexes_asB64(),
    readonlyIndexes: msg.getReadonlyIndexes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.MessageAddressTableLookup}
 */
proto.thor_streamer.types.MessageAddressTableLookup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.MessageAddressTableLookup;
  return proto.thor_streamer.types.MessageAddressTableLookup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.MessageAddressTableLookup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.MessageAddressTableLookup}
 */
proto.thor_streamer.types.MessageAddressTableLookup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWritableIndexes(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReadonlyIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.MessageAddressTableLookup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.MessageAddressTableLookup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.MessageAddressTableLookup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getWritableIndexes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReadonlyIndexes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes account_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getAccountKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account_key = 1;
 * This is a type-conversion wrapper around `getAccountKey()`
 * @return {string}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getAccountKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountKey()));
};


/**
 * optional bytes account_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountKey()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getAccountKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.MessageAddressTableLookup} returns this
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.setAccountKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes writable_indexes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getWritableIndexes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes writable_indexes = 2;
 * This is a type-conversion wrapper around `getWritableIndexes()`
 * @return {string}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getWritableIndexes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWritableIndexes()));
};


/**
 * optional bytes writable_indexes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWritableIndexes()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getWritableIndexes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWritableIndexes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.MessageAddressTableLookup} returns this
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.setWritableIndexes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes readonly_indexes = 3;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getReadonlyIndexes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes readonly_indexes = 3;
 * This is a type-conversion wrapper around `getReadonlyIndexes()`
 * @return {string}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getReadonlyIndexes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReadonlyIndexes()));
};


/**
 * optional bytes readonly_indexes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReadonlyIndexes()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.getReadonlyIndexes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReadonlyIndexes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.MessageAddressTableLookup} returns this
 */
proto.thor_streamer.types.MessageAddressTableLookup.prototype.setReadonlyIndexes = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.Message.repeatedFields_ = [4,5,6,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    header: (f = msg.getHeader()) && proto.thor_streamer.types.MessageHeader.toObject(includeInstance, f),
    recentBlockHash: msg.getRecentBlockHash_asB64(),
    accountKeysList: msg.getAccountKeysList_asB64(),
    instructionsList: jspb.Message.toObjectList(msg.getInstructionsList(),
    proto.thor_streamer.types.CompiledInstruction.toObject, includeInstance),
    addressTableLookupsList: jspb.Message.toObjectList(msg.getAddressTableLookupsList(),
    proto.thor_streamer.types.MessageAddressTableLookup.toObject, includeInstance),
    loadedAddresses: (f = msg.getLoadedAddresses()) && proto.thor_streamer.types.LoadedAddresses.toObject(includeInstance, f),
    isWritableList: (f = jspb.Message.getRepeatedBooleanField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.Message}
 */
proto.thor_streamer.types.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.Message;
  return proto.thor_streamer.types.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.Message}
 */
proto.thor_streamer.types.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.thor_streamer.types.MessageHeader;
      reader.readMessage(value,proto.thor_streamer.types.MessageHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecentBlockHash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAccountKeys(value);
      break;
    case 5:
      var value = new proto.thor_streamer.types.CompiledInstruction;
      reader.readMessage(value,proto.thor_streamer.types.CompiledInstruction.deserializeBinaryFromReader);
      msg.addInstructions(value);
      break;
    case 6:
      var value = new proto.thor_streamer.types.MessageAddressTableLookup;
      reader.readMessage(value,proto.thor_streamer.types.MessageAddressTableLookup.deserializeBinaryFromReader);
      msg.addAddressTableLookups(value);
      break;
    case 7:
      var value = new proto.thor_streamer.types.LoadedAddresses;
      reader.readMessage(value,proto.thor_streamer.types.LoadedAddresses.deserializeBinaryFromReader);
      msg.setLoadedAddresses(value);
      break;
    case 8:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIsWritable(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.thor_streamer.types.MessageHeader.serializeBinaryToWriter
    );
  }
  f = message.getRecentBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAccountKeysList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.thor_streamer.types.CompiledInstruction.serializeBinaryToWriter
    );
  }
  f = message.getAddressTableLookupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.thor_streamer.types.MessageAddressTableLookup.serializeBinaryToWriter
    );
  }
  f = message.getLoadedAddresses();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.thor_streamer.types.LoadedAddresses.serializeBinaryToWriter
    );
  }
  f = message.getIsWritableList();
  if (f.length > 0) {
    writer.writePackedBool(
      8,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.thor_streamer.types.Message.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MessageHeader header = 2;
 * @return {?proto.thor_streamer.types.MessageHeader}
 */
proto.thor_streamer.types.Message.prototype.getHeader = function() {
  return /** @type{?proto.thor_streamer.types.MessageHeader} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.MessageHeader, 2));
};


/**
 * @param {?proto.thor_streamer.types.MessageHeader|undefined} value
 * @return {!proto.thor_streamer.types.Message} returns this
*/
proto.thor_streamer.types.Message.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.Message.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes recent_block_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.Message.prototype.getRecentBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes recent_block_hash = 3;
 * This is a type-conversion wrapper around `getRecentBlockHash()`
 * @return {string}
 */
proto.thor_streamer.types.Message.prototype.getRecentBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecentBlockHash()));
};


/**
 * optional bytes recent_block_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecentBlockHash()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.Message.prototype.getRecentBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecentBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.setRecentBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated bytes account_keys = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.thor_streamer.types.Message.prototype.getAccountKeysList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes account_keys = 4;
 * This is a type-conversion wrapper around `getAccountKeysList()`
 * @return {!Array<string>}
 */
proto.thor_streamer.types.Message.prototype.getAccountKeysList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAccountKeysList()));
};


/**
 * repeated bytes account_keys = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountKeysList()`
 * @return {!Array<!Uint8Array>}
 */
proto.thor_streamer.types.Message.prototype.getAccountKeysList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAccountKeysList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.setAccountKeysList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.addAccountKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.clearAccountKeysList = function() {
  return this.setAccountKeysList([]);
};


/**
 * repeated CompiledInstruction instructions = 5;
 * @return {!Array<!proto.thor_streamer.types.CompiledInstruction>}
 */
proto.thor_streamer.types.Message.prototype.getInstructionsList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.CompiledInstruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.CompiledInstruction, 5));
};


/**
 * @param {!Array<!proto.thor_streamer.types.CompiledInstruction>} value
 * @return {!proto.thor_streamer.types.Message} returns this
*/
proto.thor_streamer.types.Message.prototype.setInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.thor_streamer.types.CompiledInstruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.CompiledInstruction}
 */
proto.thor_streamer.types.Message.prototype.addInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.thor_streamer.types.CompiledInstruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.clearInstructionsList = function() {
  return this.setInstructionsList([]);
};


/**
 * repeated MessageAddressTableLookup address_table_lookups = 6;
 * @return {!Array<!proto.thor_streamer.types.MessageAddressTableLookup>}
 */
proto.thor_streamer.types.Message.prototype.getAddressTableLookupsList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.MessageAddressTableLookup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.MessageAddressTableLookup, 6));
};


/**
 * @param {!Array<!proto.thor_streamer.types.MessageAddressTableLookup>} value
 * @return {!proto.thor_streamer.types.Message} returns this
*/
proto.thor_streamer.types.Message.prototype.setAddressTableLookupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.thor_streamer.types.MessageAddressTableLookup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.MessageAddressTableLookup}
 */
proto.thor_streamer.types.Message.prototype.addAddressTableLookups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.thor_streamer.types.MessageAddressTableLookup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.clearAddressTableLookupsList = function() {
  return this.setAddressTableLookupsList([]);
};


/**
 * optional LoadedAddresses loaded_addresses = 7;
 * @return {?proto.thor_streamer.types.LoadedAddresses}
 */
proto.thor_streamer.types.Message.prototype.getLoadedAddresses = function() {
  return /** @type{?proto.thor_streamer.types.LoadedAddresses} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.LoadedAddresses, 7));
};


/**
 * @param {?proto.thor_streamer.types.LoadedAddresses|undefined} value
 * @return {!proto.thor_streamer.types.Message} returns this
*/
proto.thor_streamer.types.Message.prototype.setLoadedAddresses = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.clearLoadedAddresses = function() {
  return this.setLoadedAddresses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.Message.prototype.hasLoadedAddresses = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated bool is_writable = 8;
 * @return {!Array<boolean>}
 */
proto.thor_streamer.types.Message.prototype.getIsWritableList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 8));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.setIsWritableList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.addIsWritable = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.Message} returns this
 */
proto.thor_streamer.types.Message.prototype.clearIsWritableList = function() {
  return this.setIsWritableList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.SanitizedTransaction.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.SanitizedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.SanitizedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SanitizedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.thor_streamer.types.Message.toObject(includeInstance, f),
    messageHash: msg.getMessageHash_asB64(),
    signaturesList: msg.getSignaturesList_asB64(),
    isSimpleVoteTransaction: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.SanitizedTransaction}
 */
proto.thor_streamer.types.SanitizedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.SanitizedTransaction;
  return proto.thor_streamer.types.SanitizedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.SanitizedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.SanitizedTransaction}
 */
proto.thor_streamer.types.SanitizedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.thor_streamer.types.Message;
      reader.readMessage(value,proto.thor_streamer.types.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSignatures(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSimpleVoteTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.SanitizedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.SanitizedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.SanitizedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.thor_streamer.types.Message.serializeBinaryToWriter
    );
  }
  f = message.getMessageHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignaturesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getIsSimpleVoteTransaction();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Message message = 1;
 * @return {?proto.thor_streamer.types.Message}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getMessage = function() {
  return /** @type{?proto.thor_streamer.types.Message} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.Message, 1));
};


/**
 * @param {?proto.thor_streamer.types.Message|undefined} value
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
*/
proto.thor_streamer.types.SanitizedTransaction.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes message_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getMessageHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes message_hash = 2;
 * This is a type-conversion wrapper around `getMessageHash()`
 * @return {string}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getMessageHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageHash()));
};


/**
 * optional bytes message_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageHash()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getMessageHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.setMessageHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes signatures = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getSignaturesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes signatures = 3;
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<string>}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getSignaturesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignaturesList()));
};


/**
 * repeated bytes signatures = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getSignaturesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignaturesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.setSignaturesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.addSignatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};


/**
 * optional bool is_simple_vote_transaction = 4;
 * @return {boolean}
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.getIsSimpleVoteTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.thor_streamer.types.SanitizedTransaction} returns this
 */
proto.thor_streamer.types.SanitizedTransaction.prototype.setIsSimpleVoteTransaction = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.TransactionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.TransactionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.TransactionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    slot: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signature: msg.getSignature_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isVote: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    transaction: (f = msg.getTransaction()) && proto.thor_streamer.types.SanitizedTransaction.toObject(includeInstance, f),
    transactionStatusMeta: (f = msg.getTransactionStatusMeta()) && proto.thor_streamer.types.TransactionStatusMeta.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.TransactionEvent}
 */
proto.thor_streamer.types.TransactionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.TransactionEvent;
  return proto.thor_streamer.types.TransactionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.TransactionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.TransactionEvent}
 */
proto.thor_streamer.types.TransactionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVote(value);
      break;
    case 5:
      var value = new proto.thor_streamer.types.SanitizedTransaction;
      reader.readMessage(value,proto.thor_streamer.types.SanitizedTransaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 6:
      var value = new proto.thor_streamer.types.TransactionStatusMeta;
      reader.readMessage(value,proto.thor_streamer.types.TransactionStatusMeta.deserializeBinaryFromReader);
      msg.setTransactionStatusMeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.TransactionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.TransactionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.TransactionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIsVote();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.thor_streamer.types.SanitizedTransaction.serializeBinaryToWriter
    );
  }
  f = message.getTransactionStatusMeta();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.thor_streamer.types.TransactionStatusMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 slot = 1;
 * @return {number}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
 */
proto.thor_streamer.types.TransactionEvent.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
 */
proto.thor_streamer.types.TransactionEvent.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
 */
proto.thor_streamer.types.TransactionEvent.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_vote = 4;
 * @return {boolean}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getIsVote = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
 */
proto.thor_streamer.types.TransactionEvent.prototype.setIsVote = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional SanitizedTransaction transaction = 5;
 * @return {?proto.thor_streamer.types.SanitizedTransaction}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getTransaction = function() {
  return /** @type{?proto.thor_streamer.types.SanitizedTransaction} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.SanitizedTransaction, 5));
};


/**
 * @param {?proto.thor_streamer.types.SanitizedTransaction|undefined} value
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
*/
proto.thor_streamer.types.TransactionEvent.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
 */
proto.thor_streamer.types.TransactionEvent.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.TransactionEvent.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TransactionStatusMeta transaction_status_meta = 6;
 * @return {?proto.thor_streamer.types.TransactionStatusMeta}
 */
proto.thor_streamer.types.TransactionEvent.prototype.getTransactionStatusMeta = function() {
  return /** @type{?proto.thor_streamer.types.TransactionStatusMeta} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.TransactionStatusMeta, 6));
};


/**
 * @param {?proto.thor_streamer.types.TransactionStatusMeta|undefined} value
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
*/
proto.thor_streamer.types.TransactionEvent.prototype.setTransactionStatusMeta = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.TransactionEvent} returns this
 */
proto.thor_streamer.types.TransactionEvent.prototype.clearTransactionStatusMeta = function() {
  return this.setTransactionStatusMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.TransactionEvent.prototype.hasTransactionStatusMeta = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.InnerInstruction.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.InnerInstruction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.InnerInstruction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.InnerInstruction.toObject = function(includeInstance, msg) {
  var f, obj = {
    instruction: (f = msg.getInstruction()) && proto.thor_streamer.types.CompiledInstruction.toObject(includeInstance, f),
    stackHeight: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.InnerInstruction}
 */
proto.thor_streamer.types.InnerInstruction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.InnerInstruction;
  return proto.thor_streamer.types.InnerInstruction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.InnerInstruction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.InnerInstruction}
 */
proto.thor_streamer.types.InnerInstruction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.thor_streamer.types.CompiledInstruction;
      reader.readMessage(value,proto.thor_streamer.types.CompiledInstruction.deserializeBinaryFromReader);
      msg.setInstruction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStackHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.InnerInstruction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.InnerInstruction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.InnerInstruction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.InnerInstruction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstruction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.thor_streamer.types.CompiledInstruction.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional CompiledInstruction instruction = 1;
 * @return {?proto.thor_streamer.types.CompiledInstruction}
 */
proto.thor_streamer.types.InnerInstruction.prototype.getInstruction = function() {
  return /** @type{?proto.thor_streamer.types.CompiledInstruction} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.CompiledInstruction, 1));
};


/**
 * @param {?proto.thor_streamer.types.CompiledInstruction|undefined} value
 * @return {!proto.thor_streamer.types.InnerInstruction} returns this
*/
proto.thor_streamer.types.InnerInstruction.prototype.setInstruction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.InnerInstruction} returns this
 */
proto.thor_streamer.types.InnerInstruction.prototype.clearInstruction = function() {
  return this.setInstruction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.InnerInstruction.prototype.hasInstruction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 stack_height = 2;
 * @return {number}
 */
proto.thor_streamer.types.InnerInstruction.prototype.getStackHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.InnerInstruction} returns this
 */
proto.thor_streamer.types.InnerInstruction.prototype.setStackHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.thor_streamer.types.InnerInstruction} returns this
 */
proto.thor_streamer.types.InnerInstruction.prototype.clearStackHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.InnerInstruction.prototype.hasStackHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.InnerInstructions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.InnerInstructions.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.InnerInstructions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.InnerInstructions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.InnerInstructions.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    instructionsList: jspb.Message.toObjectList(msg.getInstructionsList(),
    proto.thor_streamer.types.InnerInstruction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.InnerInstructions}
 */
proto.thor_streamer.types.InnerInstructions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.InnerInstructions;
  return proto.thor_streamer.types.InnerInstructions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.InnerInstructions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.InnerInstructions}
 */
proto.thor_streamer.types.InnerInstructions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.thor_streamer.types.InnerInstruction;
      reader.readMessage(value,proto.thor_streamer.types.InnerInstruction.deserializeBinaryFromReader);
      msg.addInstructions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.InnerInstructions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.InnerInstructions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.InnerInstructions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.InnerInstructions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.thor_streamer.types.InnerInstruction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.thor_streamer.types.InnerInstructions.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.InnerInstructions} returns this
 */
proto.thor_streamer.types.InnerInstructions.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated InnerInstruction instructions = 2;
 * @return {!Array<!proto.thor_streamer.types.InnerInstruction>}
 */
proto.thor_streamer.types.InnerInstructions.prototype.getInstructionsList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.InnerInstruction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.InnerInstruction, 2));
};


/**
 * @param {!Array<!proto.thor_streamer.types.InnerInstruction>} value
 * @return {!proto.thor_streamer.types.InnerInstructions} returns this
*/
proto.thor_streamer.types.InnerInstructions.prototype.setInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.thor_streamer.types.InnerInstruction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.InnerInstruction}
 */
proto.thor_streamer.types.InnerInstructions.prototype.addInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.thor_streamer.types.InnerInstruction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.InnerInstructions} returns this
 */
proto.thor_streamer.types.InnerInstructions.prototype.clearInstructionsList = function() {
  return this.setInstructionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.UiTokenAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.UiTokenAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.UiTokenAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.UiTokenAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    uiAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    decimals: jspb.Message.getFieldWithDefault(msg, 2, 0),
    amount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uiAmountString: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.UiTokenAmount}
 */
proto.thor_streamer.types.UiTokenAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.UiTokenAmount;
  return proto.thor_streamer.types.UiTokenAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.UiTokenAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.UiTokenAmount}
 */
proto.thor_streamer.types.UiTokenAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUiAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUiAmountString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.UiTokenAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.UiTokenAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.UiTokenAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.UiTokenAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUiAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUiAmountString();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional double ui_amount = 1;
 * @return {number}
 */
proto.thor_streamer.types.UiTokenAmount.prototype.getUiAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.UiTokenAmount} returns this
 */
proto.thor_streamer.types.UiTokenAmount.prototype.setUiAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional uint32 decimals = 2;
 * @return {number}
 */
proto.thor_streamer.types.UiTokenAmount.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.UiTokenAmount} returns this
 */
proto.thor_streamer.types.UiTokenAmount.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string amount = 3;
 * @return {string}
 */
proto.thor_streamer.types.UiTokenAmount.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.thor_streamer.types.UiTokenAmount} returns this
 */
proto.thor_streamer.types.UiTokenAmount.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ui_amount_string = 4;
 * @return {string}
 */
proto.thor_streamer.types.UiTokenAmount.prototype.getUiAmountString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.thor_streamer.types.UiTokenAmount} returns this
 */
proto.thor_streamer.types.UiTokenAmount.prototype.setUiAmountString = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.TransactionTokenBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.TransactionTokenBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionTokenBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    mint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uiTokenAmount: (f = msg.getUiTokenAmount()) && proto.thor_streamer.types.UiTokenAmount.toObject(includeInstance, f),
    owner: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.TransactionTokenBalance}
 */
proto.thor_streamer.types.TransactionTokenBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.TransactionTokenBalance;
  return proto.thor_streamer.types.TransactionTokenBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.TransactionTokenBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.TransactionTokenBalance}
 */
proto.thor_streamer.types.TransactionTokenBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccountIndex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMint(value);
      break;
    case 3:
      var value = new proto.thor_streamer.types.UiTokenAmount;
      reader.readMessage(value,proto.thor_streamer.types.UiTokenAmount.deserializeBinaryFromReader);
      msg.setUiTokenAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.TransactionTokenBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.TransactionTokenBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionTokenBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUiTokenAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.thor_streamer.types.UiTokenAmount.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 account_index = 1;
 * @return {number}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.getAccountIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.TransactionTokenBalance} returns this
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.setAccountIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string mint = 2;
 * @return {string}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.getMint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.thor_streamer.types.TransactionTokenBalance} returns this
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.setMint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional UiTokenAmount ui_token_amount = 3;
 * @return {?proto.thor_streamer.types.UiTokenAmount}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.getUiTokenAmount = function() {
  return /** @type{?proto.thor_streamer.types.UiTokenAmount} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.UiTokenAmount, 3));
};


/**
 * @param {?proto.thor_streamer.types.UiTokenAmount|undefined} value
 * @return {!proto.thor_streamer.types.TransactionTokenBalance} returns this
*/
proto.thor_streamer.types.TransactionTokenBalance.prototype.setUiTokenAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.TransactionTokenBalance} returns this
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.clearUiTokenAmount = function() {
  return this.setUiTokenAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.hasUiTokenAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string owner = 4;
 * @return {string}
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.thor_streamer.types.TransactionTokenBalance} returns this
 */
proto.thor_streamer.types.TransactionTokenBalance.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lamports: jspb.Message.getFieldWithDefault(msg, 2, 0),
    postBalance: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rewardType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    commission: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.Reward}
 */
proto.thor_streamer.types.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.Reward;
  return proto.thor_streamer.types.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.Reward}
 */
proto.thor_streamer.types.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLamports(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPostBalance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRewardType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLamports();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPostBalance();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRewardType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string pubkey = 1;
 * @return {string}
 */
proto.thor_streamer.types.Reward.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.thor_streamer.types.Reward} returns this
 */
proto.thor_streamer.types.Reward.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 lamports = 2;
 * @return {number}
 */
proto.thor_streamer.types.Reward.prototype.getLamports = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.Reward} returns this
 */
proto.thor_streamer.types.Reward.prototype.setLamports = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 post_balance = 3;
 * @return {number}
 */
proto.thor_streamer.types.Reward.prototype.getPostBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.Reward} returns this
 */
proto.thor_streamer.types.Reward.prototype.setPostBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 reward_type = 4;
 * @return {number}
 */
proto.thor_streamer.types.Reward.prototype.getRewardType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.Reward} returns this
 */
proto.thor_streamer.types.Reward.prototype.setRewardType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 commission = 5;
 * @return {number}
 */
proto.thor_streamer.types.Reward.prototype.getCommission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.Reward} returns this
 */
proto.thor_streamer.types.Reward.prototype.setCommission = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.thor_streamer.types.TransactionStatusMeta.repeatedFields_ = [3,4,5,6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.TransactionStatusMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.TransactionStatusMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionStatusMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    isStatusErr: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    fee: jspb.Message.getFieldWithDefault(msg, 2, 0),
    preBalancesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    postBalancesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    innerInstructionsList: jspb.Message.toObjectList(msg.getInnerInstructionsList(),
    proto.thor_streamer.types.InnerInstructions.toObject, includeInstance),
    logMessagesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    preTokenBalancesList: jspb.Message.toObjectList(msg.getPreTokenBalancesList(),
    proto.thor_streamer.types.TransactionTokenBalance.toObject, includeInstance),
    postTokenBalancesList: jspb.Message.toObjectList(msg.getPostTokenBalancesList(),
    proto.thor_streamer.types.TransactionTokenBalance.toObject, includeInstance),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.thor_streamer.types.Reward.toObject, includeInstance),
    errorInfo: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta}
 */
proto.thor_streamer.types.TransactionStatusMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.TransactionStatusMeta;
  return proto.thor_streamer.types.TransactionStatusMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.TransactionStatusMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta}
 */
proto.thor_streamer.types.TransactionStatusMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsStatusErr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 3:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPreBalances(values[i]);
      }
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPostBalances(values[i]);
      }
      break;
    case 5:
      var value = new proto.thor_streamer.types.InnerInstructions;
      reader.readMessage(value,proto.thor_streamer.types.InnerInstructions.deserializeBinaryFromReader);
      msg.addInnerInstructions(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addLogMessages(value);
      break;
    case 7:
      var value = new proto.thor_streamer.types.TransactionTokenBalance;
      reader.readMessage(value,proto.thor_streamer.types.TransactionTokenBalance.deserializeBinaryFromReader);
      msg.addPreTokenBalances(value);
      break;
    case 8:
      var value = new proto.thor_streamer.types.TransactionTokenBalance;
      reader.readMessage(value,proto.thor_streamer.types.TransactionTokenBalance.deserializeBinaryFromReader);
      msg.addPostTokenBalances(value);
      break;
    case 9:
      var value = new proto.thor_streamer.types.Reward;
      reader.readMessage(value,proto.thor_streamer.types.Reward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.TransactionStatusMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.TransactionStatusMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionStatusMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsStatusErr();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPreBalancesList();
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    );
  }
  f = message.getPostBalancesList();
  if (f.length > 0) {
    writer.writePackedUint64(
      4,
      f
    );
  }
  f = message.getInnerInstructionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.thor_streamer.types.InnerInstructions.serializeBinaryToWriter
    );
  }
  f = message.getLogMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getPreTokenBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.thor_streamer.types.TransactionTokenBalance.serializeBinaryToWriter
    );
  }
  f = message.getPostTokenBalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.thor_streamer.types.TransactionTokenBalance.serializeBinaryToWriter
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.thor_streamer.types.Reward.serializeBinaryToWriter
    );
  }
  f = message.getErrorInfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional bool is_status_err = 1;
 * @return {boolean}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getIsStatusErr = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.setIsStatusErr = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint64 fee = 2;
 * @return {number}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint64 pre_balances = 3;
 * @return {!Array<number>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getPreBalancesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.setPreBalancesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addPreBalances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearPreBalancesList = function() {
  return this.setPreBalancesList([]);
};


/**
 * repeated uint64 post_balances = 4;
 * @return {!Array<number>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getPostBalancesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.setPostBalancesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addPostBalances = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearPostBalancesList = function() {
  return this.setPostBalancesList([]);
};


/**
 * repeated InnerInstructions inner_instructions = 5;
 * @return {!Array<!proto.thor_streamer.types.InnerInstructions>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getInnerInstructionsList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.InnerInstructions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.InnerInstructions, 5));
};


/**
 * @param {!Array<!proto.thor_streamer.types.InnerInstructions>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
*/
proto.thor_streamer.types.TransactionStatusMeta.prototype.setInnerInstructionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.thor_streamer.types.InnerInstructions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.InnerInstructions}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addInnerInstructions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.thor_streamer.types.InnerInstructions, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearInnerInstructionsList = function() {
  return this.setInnerInstructionsList([]);
};


/**
 * repeated string log_messages = 6;
 * @return {!Array<string>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getLogMessagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.setLogMessagesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addLogMessages = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearLogMessagesList = function() {
  return this.setLogMessagesList([]);
};


/**
 * repeated TransactionTokenBalance pre_token_balances = 7;
 * @return {!Array<!proto.thor_streamer.types.TransactionTokenBalance>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getPreTokenBalancesList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.TransactionTokenBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.TransactionTokenBalance, 7));
};


/**
 * @param {!Array<!proto.thor_streamer.types.TransactionTokenBalance>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
*/
proto.thor_streamer.types.TransactionStatusMeta.prototype.setPreTokenBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.thor_streamer.types.TransactionTokenBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.TransactionTokenBalance}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addPreTokenBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.thor_streamer.types.TransactionTokenBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearPreTokenBalancesList = function() {
  return this.setPreTokenBalancesList([]);
};


/**
 * repeated TransactionTokenBalance post_token_balances = 8;
 * @return {!Array<!proto.thor_streamer.types.TransactionTokenBalance>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getPostTokenBalancesList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.TransactionTokenBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.TransactionTokenBalance, 8));
};


/**
 * @param {!Array<!proto.thor_streamer.types.TransactionTokenBalance>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
*/
proto.thor_streamer.types.TransactionStatusMeta.prototype.setPostTokenBalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.thor_streamer.types.TransactionTokenBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.TransactionTokenBalance}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addPostTokenBalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.thor_streamer.types.TransactionTokenBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearPostTokenBalancesList = function() {
  return this.setPostTokenBalancesList([]);
};


/**
 * repeated Reward rewards = 9;
 * @return {!Array<!proto.thor_streamer.types.Reward>}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.thor_streamer.types.Reward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.thor_streamer.types.Reward, 9));
};


/**
 * @param {!Array<!proto.thor_streamer.types.Reward>} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
*/
proto.thor_streamer.types.TransactionStatusMeta.prototype.setRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.thor_streamer.types.Reward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.thor_streamer.types.Reward}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.thor_streamer.types.Reward, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.clearRewardsList = function() {
  return this.setRewardsList([]);
};


/**
 * optional string error_info = 10;
 * @return {string}
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.getErrorInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.thor_streamer.types.TransactionStatusMeta} returns this
 */
proto.thor_streamer.types.TransactionStatusMeta.prototype.setErrorInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.TransactionEventWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.TransactionEventWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionEventWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transaction: (f = msg.getTransaction()) && proto.thor_streamer.types.TransactionEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.TransactionEventWrapper}
 */
proto.thor_streamer.types.TransactionEventWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.TransactionEventWrapper;
  return proto.thor_streamer.types.TransactionEventWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.TransactionEventWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.TransactionEventWrapper}
 */
proto.thor_streamer.types.TransactionEventWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.thor_streamer.types.StreamType} */ (reader.readEnum());
      msg.setStreamType(value);
      break;
    case 2:
      var value = new proto.thor_streamer.types.TransactionEvent;
      reader.readMessage(value,proto.thor_streamer.types.TransactionEvent.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.TransactionEventWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.TransactionEventWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.TransactionEventWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.thor_streamer.types.TransactionEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamType stream_type = 1;
 * @return {!proto.thor_streamer.types.StreamType}
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.getStreamType = function() {
  return /** @type {!proto.thor_streamer.types.StreamType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.thor_streamer.types.StreamType} value
 * @return {!proto.thor_streamer.types.TransactionEventWrapper} returns this
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.setStreamType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TransactionEvent transaction = 2;
 * @return {?proto.thor_streamer.types.TransactionEvent}
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.getTransaction = function() {
  return /** @type{?proto.thor_streamer.types.TransactionEvent} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.TransactionEvent, 2));
};


/**
 * @param {?proto.thor_streamer.types.TransactionEvent|undefined} value
 * @return {!proto.thor_streamer.types.TransactionEventWrapper} returns this
*/
proto.thor_streamer.types.TransactionEventWrapper.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.TransactionEventWrapper} returns this
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.TransactionEventWrapper.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.thor_streamer.types.MessageWrapper.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.thor_streamer.types.MessageWrapper.EventMessageCase = {
  EVENT_MESSAGE_NOT_SET: 0,
  ACCOUNT_UPDATE: 1,
  SLOT: 2,
  TRANSACTION: 3
};

/**
 * @return {proto.thor_streamer.types.MessageWrapper.EventMessageCase}
 */
proto.thor_streamer.types.MessageWrapper.prototype.getEventMessageCase = function() {
  return /** @type {proto.thor_streamer.types.MessageWrapper.EventMessageCase} */(jspb.Message.computeOneofCase(this, proto.thor_streamer.types.MessageWrapper.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.thor_streamer.types.MessageWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.thor_streamer.types.MessageWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.thor_streamer.types.MessageWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.MessageWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountUpdate: (f = msg.getAccountUpdate()) && proto.thor_streamer.types.SubscribeUpdateAccountInfo.toObject(includeInstance, f),
    slot: (f = msg.getSlot()) && proto.thor_streamer.types.SlotStatusEvent.toObject(includeInstance, f),
    transaction: (f = msg.getTransaction()) && proto.thor_streamer.types.TransactionEventWrapper.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.thor_streamer.types.MessageWrapper}
 */
proto.thor_streamer.types.MessageWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.thor_streamer.types.MessageWrapper;
  return proto.thor_streamer.types.MessageWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.thor_streamer.types.MessageWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.thor_streamer.types.MessageWrapper}
 */
proto.thor_streamer.types.MessageWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.thor_streamer.types.SubscribeUpdateAccountInfo;
      reader.readMessage(value,proto.thor_streamer.types.SubscribeUpdateAccountInfo.deserializeBinaryFromReader);
      msg.setAccountUpdate(value);
      break;
    case 2:
      var value = new proto.thor_streamer.types.SlotStatusEvent;
      reader.readMessage(value,proto.thor_streamer.types.SlotStatusEvent.deserializeBinaryFromReader);
      msg.setSlot(value);
      break;
    case 3:
      var value = new proto.thor_streamer.types.TransactionEventWrapper;
      reader.readMessage(value,proto.thor_streamer.types.TransactionEventWrapper.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.thor_streamer.types.MessageWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.thor_streamer.types.MessageWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.thor_streamer.types.MessageWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.thor_streamer.types.MessageWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountUpdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.thor_streamer.types.SubscribeUpdateAccountInfo.serializeBinaryToWriter
    );
  }
  f = message.getSlot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.thor_streamer.types.SlotStatusEvent.serializeBinaryToWriter
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.thor_streamer.types.TransactionEventWrapper.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubscribeUpdateAccountInfo account_update = 1;
 * @return {?proto.thor_streamer.types.SubscribeUpdateAccountInfo}
 */
proto.thor_streamer.types.MessageWrapper.prototype.getAccountUpdate = function() {
  return /** @type{?proto.thor_streamer.types.SubscribeUpdateAccountInfo} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.SubscribeUpdateAccountInfo, 1));
};


/**
 * @param {?proto.thor_streamer.types.SubscribeUpdateAccountInfo|undefined} value
 * @return {!proto.thor_streamer.types.MessageWrapper} returns this
*/
proto.thor_streamer.types.MessageWrapper.prototype.setAccountUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.thor_streamer.types.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.MessageWrapper} returns this
 */
proto.thor_streamer.types.MessageWrapper.prototype.clearAccountUpdate = function() {
  return this.setAccountUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.MessageWrapper.prototype.hasAccountUpdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SlotStatusEvent slot = 2;
 * @return {?proto.thor_streamer.types.SlotStatusEvent}
 */
proto.thor_streamer.types.MessageWrapper.prototype.getSlot = function() {
  return /** @type{?proto.thor_streamer.types.SlotStatusEvent} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.SlotStatusEvent, 2));
};


/**
 * @param {?proto.thor_streamer.types.SlotStatusEvent|undefined} value
 * @return {!proto.thor_streamer.types.MessageWrapper} returns this
*/
proto.thor_streamer.types.MessageWrapper.prototype.setSlot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.thor_streamer.types.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.MessageWrapper} returns this
 */
proto.thor_streamer.types.MessageWrapper.prototype.clearSlot = function() {
  return this.setSlot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.MessageWrapper.prototype.hasSlot = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TransactionEventWrapper transaction = 3;
 * @return {?proto.thor_streamer.types.TransactionEventWrapper}
 */
proto.thor_streamer.types.MessageWrapper.prototype.getTransaction = function() {
  return /** @type{?proto.thor_streamer.types.TransactionEventWrapper} */ (
    jspb.Message.getWrapperField(this, proto.thor_streamer.types.TransactionEventWrapper, 3));
};


/**
 * @param {?proto.thor_streamer.types.TransactionEventWrapper|undefined} value
 * @return {!proto.thor_streamer.types.MessageWrapper} returns this
*/
proto.thor_streamer.types.MessageWrapper.prototype.setTransaction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.thor_streamer.types.MessageWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.thor_streamer.types.MessageWrapper} returns this
 */
proto.thor_streamer.types.MessageWrapper.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.thor_streamer.types.MessageWrapper.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.thor_streamer.types.StreamType = {
  STREAM_TYPE_UNSPECIFIED: 0,
  STREAM_TYPE_FILTERED: 1,
  STREAM_TYPE_WALLET: 2,
  STREAM_TYPE_ACCOUNT: 3
};

goog.object.extend(exports, proto.thor_streamer.types);
